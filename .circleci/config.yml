orbs:
  slack: circleci/slack@4.10.1

version: 2.1

jobs: 
  build:
    docker:
      - image: circleci/node:18.12.0
    working_directory: ~/repo
  slack-executor:
    docker:
      -image: 'cibuilds/base:latest'
    resource_class: small
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest



aliases: 
      - checkout
      - run:
          name: Show current branch
          command: echo ${CURRENT_BRANCH}
      - restore_cache:
        key: 
          - app-{{ checksum  "package.json"}}
          - app-
      - run: 
          name: Install dependencies
          command: |
          mkdir -p artifacts
          npm install
      - save_cache:
          paths:
            - node_modules
          key: app-{{ checksum "package.json "}}

deploy-to-aws-s3:
  docker:
    - image: circleci/node:18.12.0
  working_directory: ~/repo
  steps:
    - checkout
    - run: 
      name: Show current branch
      command: echo ${CURRENT_BRANCH}
    - run:
        name: Installing AWS CLI
        working_directory: /
        command: |
          sudo apt-get -y -qq update
          sudo apt-get install -y awscli
          sudo apt-get install -y python-pip python-dev build-essential
    - run:
        name: Build Project
        command: |
          npm install
          npm run build
          cd build 
          zip ../build.zip -r * .[^.]*
          echo "Build successful"

jobs:
  build:
    executor: app-executor
    steps:
      - chekcout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy Infrastructure Folder
          command: cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  linting:
    executor: app-executor
    steps: 
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run: 
          name: Run linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps: 
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run: 
          name: Run prettier check
          command: npm run prettier:check 
  
  terraform-validate: 
    executor: terraform-executor
    steps:
      - chekout:
      - *show-current-branch-name
      -run:
        name: Terraform Validate & Format
        command: | 
          cd infrastructure/
          terraform init -backend=false
          terraform validate
          terraform fmt -check 
   
   terraform-plan-and-apply: 
    executor: terraform-executor
    steps:
      - chekout:
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      -run:
        name: Terraform Plan
        command: | 
          cd artefacts/infrastructure/
          terraform init 
          terraform workspaces select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
          terraform plan
      -run:
        name: Terraform Apply
        command: | 
          cd artefacts/infrastructure/
          terraform workspaces select ${CIRCLE_BRANCH} 
          terraform apply --auto-approve
          terraform output cinema_app_bucket_name >../cinema_bucket_name.txt
          terraform output cloudfront_distribution_id >../cloudfront_distribution_id.txt
      
      -persist_to_workspace:
          root: ./
          paths:
            - artifacts
    deploy-to-aws-s3:
      executor: app-executor
      steps:
        - checkout
        - attach_workspace:
            att: ./
        - *show-current-branch-name
        - *install-aws-CLI
        - *build-project
      -run:
        name: Deploy to AWS S3
        command: |
          CLOUDFRONT_DISTRIBUTION_=$(cat artifacts/cloudfront_distribution_id.txt | sed 's/\"//g')
          echo CLOUDFRONT_DISTRIBUTION_
          aws configure set preview.cloudfront true
          if ["${CURRENT_BRANCH}" == "master"]
          then
            aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PROD} --delete
          elif ["${CURRENT_BRANCH}" == "staging"]
            aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_STAGING} --delete
          else
            aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
          fi
      -
  test: 
    executor: app-executor
    steps:
      - run: echo "test my app"

deploy-to-aws-cloudfront:
  docker:
    - image: circleci/node:18.12.0
  working_directory: ~/repo
  steps:
    - checkout
    - run: 
      name: Show current branch
      command: echo ${CURRENT_BRANCH}
    - run:
        name: Installing AWS CLI
        working_directory: /
        command: |
          sudo apt-get -y -qq update
          sudo apt-get install -y awscli
          sudo apt-get install -y python-pip python-dev build-essential
    - run:
        name: Build Project
        command: |
          npm install
          npm run build
          cd build 
          zip ../build.zip -r * .[^.]*
          echo "Build successful"
    - run:
        name: Deploy to AWS Cloudfront
        command: |
          aws configure set preview.cloudfront
          if ["${CURRENT_BRANCH}" == "master"]
          then
            aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths /\*
          elif ["${CURRENT_BRANCH}" == "staging"]
            aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*
          else
            aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
          fi
  
  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "Slack notification"
      - slack/notify:
          event: 'always'
          channel: 'cinema-app-circleci'
          template: ''
          custom: |
            {
              "blocks": [
                {
                  "type": "header"
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is complete.",
                    "emoji" : true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                    "type": "mrkdwn",
                    "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch*:\n$CIRCLE_BRANCH"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*When*:\n$(date + %m/%d/%Y %T)"
                  },
                  {
                     "type": "mrkdwn",
                    "text": "*When*:\n$CIRCLE_BUILD_NUM"
                  },
                  {
                       "type": "mrkdwn",
                    "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text":{
                          "type": "plain_text",
                          "text": "view job"
                        },
                        "url": "${CIRCLE_BUILD_URL}"
                      }
                    ]
                  }
                  ]
                },
              ]
            }
  
  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new {CIRCLE_BRANCH}
            terrraform destroy --auto-approve

workflows:
  build_and_deploy: 
    jobs:
      - build
      - linting:
          requires:
            -build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-validate:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - master 
      - deploy-to-aws-cloudfront:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master 
      - notify-via-slack:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
      - hold:
          type: approval
          requires: 
            -deploy-to-aws-cloudfront
      - terraform-destroy:
            requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master 
